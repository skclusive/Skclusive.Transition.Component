

<style>
    .css-node-Enter {
        opacity: 0;
    }

    .css-node-Enter-Active {
        opacity: 1;
        transition: opacity 1000ms;
    }

    .css-node-Exit {
        opacity: 1;
    }

    .css-node-Exit-Active {
        opacity: 0;
        transition: opacity 1000ms;
    }
</style>

<style>
.root {
  height: 180px;
}
.container {
  display: flex;
}
.paper {
  margin: 8px;
}
.svg {
  width: 100px;
  height: 100px;
}
.polygon {
  fill: #fff;
  stroke: rgba(0, 0, 0, 0.12);
  stroke-width: 1;
}
</style>

<div>
    <CSSTransition In="@CssInProp" Timeout="3000" EventClass="css-node">
        <div @ref="context.RefBack.Current">
            I'll receive css-node-* classes
        </div>
    </CSSTransition>
    <button type="button" @onclick="ToggleCssInProp">
        @(CssInProp ? "Click to Exit" : "Click to Enter")
    </button>
</div>

<Transition @key="KeyT3" In="@In" Appear="true" Timeout="100" OnEnter="@OnEnter" OnExit="@OnExit">
    <span @ref="context.RefBack.Current">Transition No Render</span>
</Transition>


<Transition In="true" Timeout="0" OnEnter="@((_1, _2) => throw new System.Exception(" should not Enter"))">
    <div @ref="context.RefBack.Current">Current State is @context.State and Should be Entered</div>
</Transition>

<Transition In="true" Appear="true" Timeout="0" OnEnter="@((_1, _2) => Console.WriteLine(" should transition on mountwith `appear`"))">
    <div @ref="context.RefBack.Current">Current State is @context.State and Would be Entered</div>
</Transition>

<Transition In="@In" Timeout="3000" OnEnter="@OnEnter" OnEntering="@OnEntering" OnEntered="@OnEntered" OnExit="@OnExit"
    OnExiting="@OnExiting" OnExited="@OnExited">
    <div @ref="context.RefBack.Current" style="@GetTransitionStyle(context.State)">Transition @In Current State is
        @context.State</div>
</Transition>

<br />

<button @onclick="OnClick">Change</button>
